New skills to use in the ffollowing:

	1) Deck - Stack
	2) Check every function and method to make more eficient, use recursion if needed maybe
	3) Map - Graph
	4) Computer Difficulty  - Tree (Use A* algorith to add the hardest difficulty)
					culculate efficiently the best possible choice for the computer (here lies the requirement for the 2nd portfolio project. depending on the user's input, the computer mast make the best winning move)
					maybe using a simple graph search can identiffy all the cases:
						how to make predictions in this type of game
			       - Use Dijkstra to add the normal diffficulty
	5) will hash map be helpfull in any way here?
olds	6) how I am going to implement:
		a) the ASC Art
		b) Animations
	7) add a README for GitHub that describes the 1st and 2nd protffolio project requiremts and explains everything
	
	


4) How to make predictions

What computer knows each turn:
	Remembers all the cards each deck has
		uknown what are cards on enemys hand, 
		doesn't know what is the next card on deck.
	Affter every card that is played it remembers that this card cannot be played again
	Aware off the given moments
	
build a giant graph with every possibility given
	how to create it without the need to find them all by myselfff one by one
		ideas:
		a) 	FAILED DIRECTION. FULLS MEMORY AND STOPS WORKING
			The computer can play the game against itself in the background with every deck combination to know each result.
			that means that the computer has to play the game 
				N = number of decks
				all deck order combinations = fib(N, mult)*
(*
def fibonacci2(n):
	if n < 0:
		ValueError("Input 0 or greater only!")
	if n <= 2:
		return n
	return n * fibonacci2(n - 1)
*)
				
				all move combinations = (all deck order combinations)*(all deck order combinations)
				in case of a 12card deck this will be:
					all deck order combinations = 479.001.600
					all move combinations = 229.442.532.802.560.000 
						(because of game restrictions this number can be smaller)
						(because replacement option this number can be larger)
							cannot calculate replacements because it can be infinite
			And only save the best moves for each case
				The knowlege off the cards played and the memory of the decks can help find the best move its turn
		
		b) not need to play the game multiple times in the background?
					
					
					
					



Order of functions:
	playGame()
		set_up()
			Player  #class is setting up for the cards
-----				#need class for the map
		computer_set_up()
			Player  #class is setting up for the cards
-----				#need class for the map
		start_turn(first, second)
			computer_pick_a_card()/pick_a_card()
			if replace_card()
				continue
			else:
				computer_pick_a_card()/pick_a_card()
				fight()
			
		start_turn(second, first)
		

campain:
1 player agains 3 computers
		5
		7


game modes:

all vs all     
players vs computers
custom teams



Need for a remove() methode and a checker() if a player or npc has died COMPLETE

*MAYBE NOT*Need a fucntion to handle the duplicate death situation in actuall_turn()
					

For game modes I need a way for entities to be allowed to attack only certain entities. COMPLETED

 1) There should be a self.team variable inside the entities class that will allow for this functionality COMPLETED


 2) methods and functions that needs alteration to accept this new self.team variable and make each mode work correctly: COMPLETED
	
	a) the A*star alforithm propably COMPLETED
	b) and the function that handles the situation when an entity has another entity for neigbor COMPLETED



choosee a map function that sets limit for player count  COMPLETED



1) Need to upgrade maps and use the distance ideas
(Need to choose: two entities must be in the same location to fight or just adjecent? If they are in the samee location they can stuck and it wont make much sense if they are 5 entities on the same location but fighting only one in specific, on the other hand if they fight adjecent it wont make sense if they have a large distance in betwin and no moveement availbe.
current state of game works with adjeceent entities.
Possible solutions:
	keep it the way it is
	for adjecent can add range to attacks
	for same location, give each location a fighting area )
	upgrade the roads to be able to go diagonal COMPLETED
		all moving cases:
			1 x > and y > diagonal right-down
			2 x > and y == down
			3 x > and y < diagonal left-down
			4 x == and y > right
			5 x == and y == no need to move
			6 x == and y < left
			7 x < and y > diagonal right-up
			8 x < and y == up
			9 x < and y < diagonal left-up
		now they can but not that efficient
		example to go from x1 y1 to x2 y2 instead of going instantly in one move first it will move to x2 y1 then will take one more move
	I want give functionality to the distance parameterm COMPLETED
		one location at time until there is no more available player movement		
	distinquise in the map the only available roads
		the total number of the road parts that is equal to its players movement should change symbol/shape
2) Need to add more maps
	obstucles
	mines?
3) Need to upgrade campaign, each difficulty should have multiple levels that each will:
	increase enemy count
	have more complete decks
		add more cards and functionalities


!After all that I will get back to the animations and ACSI art
!Some time make NPCs smarter? or less random



















					
					
					
					

